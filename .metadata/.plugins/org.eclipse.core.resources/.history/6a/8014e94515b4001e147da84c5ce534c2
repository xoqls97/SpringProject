package com.myweb.www.controller;

import java.security.Principal;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.security.MemberVO;
import com.myweb.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;


@RequiredArgsConstructor
@Slf4j
@RequestMapping("/member/*")
@Controller
public class MemberController {
	private final MemberService msv;
	private final BCryptPasswordEncoder bcEncoder;
	
	@GetMapping("/register")
	public void register() {}
	
	@PostMapping("/register")
	public String register(MemberVO mvo) {
		mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		log.info(">>> register>>mvo>>()",mvo);
		int isOk=msv.register(mvo);
		
		return "index";
	}
	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String login(HttpServletRequest request, RedirectAttributes re) {
		//로그인 실패시 다시 로그인 페이지로 돌아와 오류 메시지 전송
		//다시 로그인 유도
		re.addAttribute("email",request.getAttribute("email"));
		re.addAttribute("errMsg",request.getAttribute("errMsg"));
		
		return "redirect:/member/login";
	}
	
	@GetMapping("/modify")
	public void modify(Principal p, Model m) {
		log.info(">>>principal >> email>>>>"+p.getName());
		String email = p.getName();
		m.addAttribute("mvo", msv.modify(email));
	}
	
	@PostMapping("/modify")
	public String modify(MemberVO mvo) {
		
		if(mvo.getPwd().isEmpty()) {
			//비번 없는 업데이트 진행
			msv.noupdate(mvo);
		}else {
			//비번을 다시 인코딩 해서 업데이트 진행
			mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
			msv.update(mvo);
		}
		//로그아웃 진행
		Authentication authentication = SecurityContextHolder
	                            		.getContext()
				                        .getAuthentication(); //현재 로그인되있는 authentication
		
		
		
		
		
		return "/member/login";
	}
	
	
	
	
	
	
		
	
	
}
